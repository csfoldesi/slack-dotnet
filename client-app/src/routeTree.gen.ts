/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as WorkspaceIndexImport } from "./routes/workspace/index"
import { Route as AuthIndexImport } from "./routes/auth/index"
import { Route as AuthCallbackImport } from "./routes/auth/callback"

// Create/Update Routes

const WorkspaceIndexRoute = WorkspaceIndexImport.update({
  id: "/workspace/",
  path: "/workspace/",
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: "/auth/",
  path: "/auth/",
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackRoute = AuthCallbackImport.update({
  id: "/auth/callback",
  path: "/auth/callback",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/auth/callback": {
      id: "/auth/callback"
      path: "/auth/callback"
      fullPath: "/auth/callback"
      preLoaderRoute: typeof AuthCallbackImport
      parentRoute: typeof rootRoute
    }
    "/auth/": {
      id: "/auth/"
      path: "/auth"
      fullPath: "/auth"
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    "/workspace/": {
      id: "/workspace/"
      path: "/workspace"
      fullPath: "/workspace"
      preLoaderRoute: typeof WorkspaceIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/auth/callback": typeof AuthCallbackRoute
  "/auth": typeof AuthIndexRoute
  "/workspace": typeof WorkspaceIndexRoute
}

export interface FileRoutesByTo {
  "/auth/callback": typeof AuthCallbackRoute
  "/auth": typeof AuthIndexRoute
  "/workspace": typeof WorkspaceIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/auth/callback": typeof AuthCallbackRoute
  "/auth/": typeof AuthIndexRoute
  "/workspace/": typeof WorkspaceIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/auth/callback" | "/auth" | "/workspace"
  fileRoutesByTo: FileRoutesByTo
  to: "/auth/callback" | "/auth" | "/workspace"
  id: "__root__" | "/auth/callback" | "/auth/" | "/workspace/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthIndexRoute: typeof AuthIndexRoute
  WorkspaceIndexRoute: typeof WorkspaceIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthCallbackRoute: AuthCallbackRoute,
  AuthIndexRoute: AuthIndexRoute,
  WorkspaceIndexRoute: WorkspaceIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/auth/callback",
        "/auth/",
        "/workspace/"
      ]
    },
    "/auth/callback": {
      "filePath": "auth/callback.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/workspace/": {
      "filePath": "workspace/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
